{"version":3,"sources":["api.ts","components/ListOfTodos.tsx","components/SortingButtons.tsx","components/LoadingButtons.tsx","components/Users.tsx","App.tsx","index.tsx"],"names":["URL_USERS","URL_TODOS","loadUsers","a","fetch","response","json","data","ok","Error","statusText","message","loadTodos","ListOfTodos","props","sortedTodos","map","todo","key","id","type","defaultChecked","completed","title","SortingButtons","onSortByTitle","onSortByComplete","onSortByUser","loading","ButtonGroup","color","variant","aria-label","Button","onClick","disabled","LoadingButtons","onLoading","gotError","errorMessage","Users","users","user","name","App","useState","setLoading","loaded","setLoaded","setGotError","setErrorMessage","todos","setTodos","setUsers","setSortedTodos","loadData","Promise","all","loadedData","compareByTitle","b","localeCompare","compareByCompleted","sort","comparingUsers","userA","find","userId","userB","nameA","nameB","then","usersData","todosData","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61dca32b.chunk.js","sourcesContent":["import { Todo, User } from './types';\n\nconst URL_USERS = 'https://mate.academy/students-api/users';\nconst URL_TODOS = 'https://mate.academy/students-api/todos';\n\nexport async function loadUsers(): Promise<User[]> {\n  try {\n    const response = await fetch(URL_USERS);\n    const data = await response.json();\n\n    if (response.ok) {\n      return data.data;\n    }\n\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    throw new Error(`${error.message} Users, try again`);\n  }\n}\n\nexport async function loadTodos(): Promise<Todo[]> {\n  try {\n    const response = await fetch(URL_TODOS);\n    const data = await response.json();\n\n    if (response.ok) {\n      return data.data;\n    }\n\n    throw new Error(`${response.statusText}`);\n  } catch (error) {\n    throw new Error(`${error.message} Todos, try again`);\n  }\n}\n","import React, { FC } from 'react';\nimport { Todo } from '../types';\n\ntype TodosProps = {\n  sortedTodos: Todo[];\n};\n\nexport const ListOfTodos: FC<TodosProps> = (props) => {\n  const { sortedTodos } = props;\n\n  return (\n    <ol>\n      <h2>TODOs:</h2>\n      {sortedTodos.map((todo: Todo) => (\n        <li\n          key={todo.id}\n        >\n          <input\n            type=\"checkbox\"\n            defaultChecked={todo.completed}\n          />\n          {todo.title}\n        </li>\n      ))}\n    </ol>\n  );\n};\n","import React, { FC } from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\ntype SortingProps = {\n  onSortByTitle: () => void;\n  onSortByComplete: () => void;\n  onSortByUser: () => void;\n  loading: boolean;\n};\n\nexport const SortingButtons: FC<SortingProps> = (props) => {\n  const {\n    onSortByTitle,\n    onSortByComplete,\n    onSortByUser,\n    loading,\n  } = props;\n\n  return (\n    <>\n      <h3>Sorting by:</h3>\n      <ButtonGroup\n        color=\"primary\"\n        variant=\"outlined\"\n        aria-label=\"outlined primary button group\"\n      >\n        <Button\n          onClick={onSortByTitle}\n          disabled={loading}\n        >\n          Sort by title\n        </Button>\n        <Button\n          onClick={onSortByComplete}\n          disabled={loading}\n        >\n          Sort by completed\n        </Button>\n        <Button\n          onClick={onSortByUser}\n          disabled={loading}\n        >\n          Sort by user\n        </Button>\n      </ButtonGroup>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport Button from '@material-ui/core/Button';\n\ntype LoadingProps = {\n  onLoading: () => void;\n  loading: boolean;\n  gotError: boolean;\n  errorMessage: string;\n};\n\nexport const LoadingButtons: FC<LoadingProps> = (props) => {\n  const {\n    onLoading,\n    loading,\n    gotError,\n    errorMessage,\n  } = props;\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"button\"\n        onClick={onLoading}\n        disabled={loading}\n      >\n        {loading ? 'Loading...' : 'Load'}\n      </Button>\n      {gotError === true\n        && (\n          <p>\n            {errorMessage}\n            {' '}\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              type=\"button\"\n              onClick={onLoading}\n            >\n              Retry Loading\n            </Button>\n          </p>\n        )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { User } from '../types';\n\ntype UsersProps = {\n  users: User[];\n};\n\nexport const Users: FC<UsersProps> = (props) => {\n  const {\n    users,\n  } = props;\n\n  return (\n    <>\n      <h2>Users</h2>\n      {users.map((user: User) => (\n        <p\n          key={user.id}\n        >\n          {user.name}\n        </p>\n      ))}\n    </>\n  );\n};\n","import React, { useState, FC } from 'react';\nimport { Todo, User } from './types';\nimport { loadUsers, loadTodos } from './api';\nimport { ListOfTodos } from './components/ListOfTodos';\nimport { SortingButtons } from './components/SortingButtons';\nimport { LoadingButtons } from './components/LoadingButtons';\nimport { Users } from './components/Users';\n\nconst App: FC<{}> = () => {\n  const [loading, setLoading] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [gotError, setGotError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [sortedTodos, setSortedTodos] = useState<Todo[]>([]);\n\n  const loadData = async (): Promise<[User[], Todo[]]> => {\n    const loadedData = await Promise.all([\n      loadUsers(),\n      loadTodos(),\n    ]);\n\n    return loadedData;\n  };\n\n  const onLoading = (): void => {\n    setLoading(true);\n\n    loadData()\n      .then((data) => {\n        const [usersData, todosData] = data;\n\n        setUsers(usersData);\n        setTodos(todosData);\n        setSortedTodos(todosData);\n        setLoading(false);\n        setLoaded(true);\n        setErrorMessage('');\n        setGotError(false);\n      })\n      .catch(error => {\n        setGotError(true);\n        setErrorMessage(error.message);\n      });\n  };\n\n  const compareByTitle = (a: Todo, b: Todo) => (\n    a.title.localeCompare(b.title)\n  );\n\n  const compareByCompleted = (a: Todo, b: Todo) => (\n    (a.completed && !b.completed) ? -1 : 1\n  );\n\n  const compareByUser = (comparingUsers: User[]) => {\n    return (a: Todo, b: Todo) => {\n      const userA = comparingUsers\n        .find((user) => (user.id === a.userId));\n      const userB = comparingUsers\n        .find((user) => (user.id === b.userId));\n\n      if (userA && userB) {\n        const nameA = userA.name;\n        const nameB = userB.name;\n\n        return nameA.localeCompare(nameB);\n      }\n\n      return 0;\n    };\n  };\n\n  const onSortByTitle = (): void => {\n    setSortedTodos([...todos].sort(compareByTitle));\n  };\n\n  const onSortByComplete = (): void => {\n    setSortedTodos([...todos].sort(compareByCompleted));\n  };\n\n  const onSortByUser = (): void => {\n    setSortedTodos([...todos].sort(compareByUser(users)));\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {\n        (!loaded)\n          ? (\n            <LoadingButtons\n              onLoading={onLoading}\n              loading={loading}\n              gotError={gotError}\n              errorMessage={errorMessage}\n            />\n          ) : (\n            <>\n              <Users\n                users={users}\n              />\n              <SortingButtons\n                onSortByTitle={onSortByTitle}\n                onSortByComplete={onSortByComplete}\n                onSortByUser={onSortByUser}\n                loading={loading}\n              />\n              <ListOfTodos\n                sortedTodos={sortedTodos}\n              />\n            </>\n          )\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}