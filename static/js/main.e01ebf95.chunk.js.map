{"version":3,"sources":["api.ts","App.tsx","index.tsx"],"names":["loadUsers","fetch","then","response","ok","json","Error","statusText","data","catch","error","console","message","loadTodos","initState","setLoading","setLoaded","gotError","todos","sortedTodos","users","compareByTitle","a","b","title","localeCompare","compareByCompleted","completed","compareByUser","userA","find","user","id","userId","userB","nameA","name","nameB","App","state","loadData","Promise","all","loadedData","onLoading","setState","prevState","onSortByTitle","sort","onSortByComplete","onSortByUser","this","map","key","ButtonGroup","color","variant","aria-label","Button","onClick","disabled","todo","type","defaultChecked","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e01ebf95.chunk.js","sourcesContent":["import { Todo, User } from './types';\n\nconst URL_USERS = 'https://mate.academy/students-api/users';\nconst URL_TODOS = 'https://mate.academy/students-api/todos';\n\ninterface ResponseData<D> {\n  data: D;\n  error?: string;\n}\n\ntype UsersData = ResponseData<User[]>;\ntype TodosData = ResponseData<Todo[]>;\n\nexport function loadUsers(): Promise<User[]> {\n  return fetch(URL_USERS)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Response of Users API not successful ${response.statusText}`);\n    })\n    .then(({ data }: UsersData) => data)\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error(error.message);\n\n      throw new Error('Failed to Fetch Users, press button again');\n    });\n}\n\n// export async function loadUsers2(): Promise<User[]> {\n//   const response = await fetch(URL_USERS);\n//   const data = await response.json();\n\n//   return data;\n// }\n\nexport function loadTodos(): Promise<Todo[]> {\n  return fetch(URL_TODOS)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Response of Todos API ot successful ${response.statusText}`);\n    })\n    .then(({ data }: TodosData) => data)\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error(error.message);\n\n      throw new Error('Failed to Fetch Todos, press button again');\n    });\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport './App.css';\nimport { Todo, User } from './types';\nimport { loadUsers, loadTodos } from './api';\n\ninterface State {\n  setLoading: boolean;\n  setLoaded: boolean;\n  gotError: boolean;\n  error: string;\n  todos: Todo[];\n  sortedTodos: Todo[];\n  users: User[];\n}\n\nconst initState: State = {\n  setLoading: false,\n  setLoaded: false,\n  gotError: false,\n  error: '',\n  todos: [],\n  sortedTodos: [],\n  users: [],\n};\n\nconst compareByTitle = (a: Todo, b: Todo) => (\n  a.title.localeCompare(b.title)\n);\n\nconst compareByCompleted = (a: Todo, b: Todo) => (\n  (a.completed && !b.completed) ? -1 : 1\n);\n\nconst compareByUser = (users: User[]) => {\n  return (a: Todo, b: Todo) => {\n    const userA = users\n      .find((user) => (user.id === a.userId));\n    const userB = users\n      .find((user) => (user.id === b.userId));\n\n    if (userA && userB) {\n      const nameA = userA.name;\n      const nameB = userB.name;\n\n      return nameA.localeCompare(nameB);\n    }\n\n    return 0;\n  };\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = initState;\n\n  loadData = async (): Promise<[User[], Todo[]]> => {\n    const loadedData = await Promise.all([\n      loadUsers(),\n      loadTodos(),\n    ]);\n\n    return loadedData;\n  };\n\n  onLoading = (): void => {\n    this.setState((prevState) => ({\n      ...prevState,\n      setLoading: true,\n    }));\n\n    this.loadData()\n      .then(([users, todos]) => {\n        this.setState((prevState: State) => ({\n          ...prevState,\n          users,\n          todos,\n          sortedTodos: todos,\n          setLoading: false,\n          setLoaded: true,\n          error: '',\n          gotError: false,\n        }));\n      })\n      .catch(error => {\n        this.setState(prevState => ({\n          ...prevState,\n          error: error.message,\n          gotError: true,\n        }));\n      });\n  };\n\n  onSortByTitle = (): void => {\n    const {\n      todos,\n    } = this.state;\n\n    this.setState((prevState: State) => ({\n      ...prevState,\n      sortedTodos: todos.sort(compareByTitle),\n    }));\n  };\n\n  onSortByComplete = (): void => {\n    const {\n      todos,\n    } = this.state;\n\n    this.setState((prevState: State) => ({\n      ...prevState,\n      sortedTodos: todos.sort(compareByCompleted),\n    }));\n  };\n\n  onSortByUser = (): void => {\n    const {\n      todos,\n      users,\n    } = this.state;\n\n    this.setState((prevState: State) => ({\n      ...prevState,\n      sortedTodos: todos.sort(compareByUser(users)),\n    }));\n  };\n\n  render() {\n    const {\n      setLoading,\n      setLoaded,\n      sortedTodos,\n      users,\n      gotError,\n      error,\n    } = this.state;\n\n    return (\n      <>\n        <h1>Dynamic list of TODOs</h1>\n        {\n          (!setLoaded)\n            ? (\n              <>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"button\"\n                  onClick={this.onLoading}\n                  disabled={setLoading}\n                >\n                  {setLoading ? 'Loading...' : 'Load'}\n                </Button>\n                {gotError === true\n                  && (\n                    <p>\n                      {error}\n                      {' '}\n                      <Button\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        type=\"button\"\n                        onClick={this.onLoading}\n                      >\n                        Retry Loading\n                      </Button>\n                    </p>\n                  )}\n              </>\n            ) : (\n              <div>\n                <h2>Users</h2>\n                {users.map((user: User) => (\n                  <p\n                    key={user.id}\n                  >\n                    {user.name}\n                  </p>\n                ))}\n                <h2>TODO:</h2>\n                <div>\n                  <h3>Sorting by:</h3>\n                  <ButtonGroup\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    aria-label=\"outlined primary button group\"\n                  >\n                    <Button\n                      onClick={this.onSortByTitle}\n                      disabled={setLoading}\n                    >\n                      Sort by title\n                    </Button>\n                    <Button\n                      onClick={this.onSortByComplete}\n                      disabled={setLoading}\n                    >\n                      Sort by completed\n                    </Button>\n                    <Button\n                      onClick={this.onSortByUser}\n                      disabled={setLoading}\n                    >\n                      Sort by user\n                    </Button>\n                  </ButtonGroup>\n                </div>\n                <ol>\n                  {sortedTodos.map((todo: Todo) => (\n                    <li\n                      key={todo.id}\n                    >\n                      <input\n                        type=\"checkbox\"\n                        defaultChecked={todo.completed}\n                      />\n                      {todo.title}\n                    </li>\n                  ))}\n                </ol>\n              </div>\n            )\n        }\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}